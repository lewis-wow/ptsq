import { exec as child_process_exec } from 'child_process';
import { readFileSync, unlinkSync } from 'fs';
import { join } from 'path';
import { promisify } from 'util';
import { ptsq, Type, useCORS } from '@ptsq/server';
import { createHttpTestServer } from '@ptsq/test-utils';
import { expect, test } from 'vitest';

const exec = promisify(child_process_exec);

test('Should instropectate simple http server', async () => {
  const { resolver, router, serve } = ptsq({
    ctx: () => ({}),
    plugins: [useCORS({ origin: '*' })],
  }).create();

  const baseRouter = router({
    test: resolver
      .args(
        Type.Object({
          name: Type.String(),
        }),
      )
      .output(Type.String())
      .query(({ input }) => input.name),
  });

  const { $disconnect, url } = await createHttpTestServer(serve(baseRouter));

  const schemaFile = join(__dirname, 'schema.generated.ts');

  const execResult = await exec(`pnpm start --url=${url} --out=${schemaFile}`);

  expect(execResult.stderr).toBe('');

  expect(readFileSync(schemaFile).toString()).toMatchInlineSnapshot(`
    "/* eslint-disable */
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface BaseRouter {
      _def: {
        nodeType: \\"router\\";
        routes: {
          test: {
            _def: {
              type: \\"query\\";
              nodeType: \\"route\\";
              argsSchema: {
                name: string;
                [k: string]: unknown;
              };
              outputSchema: string;
            };
          };
        };
      };
    }
    "
  `);

  unlinkSync(schemaFile);

  await $disconnect();
});

test('Should instropectate simple http server with empty query', async () => {
  const { resolver, router, serve } = ptsq({
    ctx: () => ({}),
    plugins: [useCORS({ origin: '*' })],
  }).create();

  const baseRouter = router({
    test: resolver.output(Type.Null()).query(() => null),
  });

  const { $disconnect, url } = await createHttpTestServer(serve(baseRouter));

  const schemaFile = join(__dirname, 'schema.generated.ts');

  const execResult = await exec(`pnpm start --url=${url} --out=${schemaFile}`);

  expect(execResult.stderr).toBe('');

  expect(readFileSync(schemaFile).toString()).toMatchInlineSnapshot(`
    "/* eslint-disable */
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface BaseRouter {
      _def: {
        nodeType: \\"router\\";
        routes: {
          test: {
            _def: {
              type: \\"query\\";
              nodeType: \\"route\\";
              outputSchema: null;
            };
          };
        };
      };
    }
    "
  `);

  unlinkSync(schemaFile);

  await $disconnect();
});

test('Should instropectate simple http server with nested routers', async () => {
  const { resolver, router, serve } = ptsq({
    ctx: () => ({}),
    plugins: [useCORS({ origin: '*' })],
  }).create();

  const baseRouter = router({
    test: router({
      test: router({
        test: router({
          test: router({
            test: router({
              test: router({
                test: resolver.output(Type.Null()).query(() => null),
              }),
            }),
          }),
        }),
      }),
    }),
  });

  const { $disconnect, url } = await createHttpTestServer(serve(baseRouter));

  const schemaFile = join(__dirname, 'schema.generated.ts');

  const execResult = await exec(`pnpm start --url=${url} --out=${schemaFile}`);

  expect(execResult.stderr).toBe('');

  expect(readFileSync(schemaFile).toString()).toMatchInlineSnapshot(`
    "/* eslint-disable */
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface BaseRouter {
      _def: {
        nodeType: \\"router\\";
        routes: {
          test: {
            _def: {
              nodeType: \\"router\\";
              routes: {
                test: {
                  _def: {
                    nodeType: \\"router\\";
                    routes: {
                      test: {
                        _def: {
                          nodeType: \\"router\\";
                          routes: {
                            test: {
                              _def: {
                                nodeType: \\"router\\";
                                routes: {
                                  test: {
                                    _def: {
                                      nodeType: \\"router\\";
                                      routes: {
                                        test: {
                                          _def: {
                                            nodeType: \\"router\\";
                                            routes: {
                                              test: {
                                                _def: {
                                                  type: \\"query\\";
                                                  nodeType: \\"route\\";
                                                  outputSchema: null;
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
    "
  `);

  unlinkSync(schemaFile);

  await $disconnect();
});
